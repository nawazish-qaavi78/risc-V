
.temp.file.elf:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    d  .init	00000000 .init
00000054 l    d  .text	00000000 .text
02000000 l    d  .data	00000000 .data
02000000 l    d  .bss	00000000 .bss
02000000 l    d  .stack	00000000 .stack
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 tls.c
00000000 l    df *ABS*	00000000 
000001ee l       .debug_info	00000000 
000001ee l       .debug_info	00000000 
000001ee l       .debug_info	00000000 
000001ee l       .debug_info	00000000 
000001ee l       .debug_info	00000000 
000001ee l       .debug_info	00000000 
000001ee l       .debug_info	00000000 
000001ee l       .debug_info	00000000 
000001ee l       .debug_info	00000000 
000001ee l       .debug_info	00000000 
000001ee l       .debug_info	00000000 
000001ee l       .debug_info	00000000 
000001ee l       .debug_info	00000000 
000001ee l       .debug_info	00000000 
000001ee l       .debug_info	00000000 
000001ee l       .debug_info	00000000 
000001ee l       .debug_info	00000000 
000001ee l       .debug_info	00000000 
000001ee l       .debug_info	00000000 
000001ee l       .debug_info	00000000 
000001ee l       .debug_info	00000000 
000001ee l       .debug_info	00000000 
000001ee  w      .debug_info	00000000 .hidden path_planner.c.f6905a91
00000000 g       *ABS*	00000000 __data_size
02000800 g       .data	00000000 __global_pointer$
02000000 g       .bss	00000000 __tls_base
00000400 g       *ABS*	00000000 __flash_size
00000008 g       *ABS*	00000000 __stack_size
00000000 g       *ABS*	00000000 __bss_size
0000034c g     F .text	00000024 memcpy
02000000 g       .bss	00000000 __bss_end
00000000 g       *ABS*	00000000 __tbss_size
00000344 g     F .text	00000008 _set_tls
00000000 g     F .init	00000000 _start
02000000 g       *ABS*	00000000 __ram
02000000 g       .bss	00000000 __data_end
0000038c g       .text	00000000 __text_end
02000000 g       .bss	00000000 __bss_start
00000370 g     F .text	0000001c memset
00000054 g     F .text	000002f0 main
00000040 g       *ABS*	00000000 __ram_size
02000040 g       .init	00000000 __stack
00000000 g     F *ABS*	00000000 vfscanf
00000390 g       *ABS*	00000000 __data_source
00000000 g       *ABS*	00000000 __flash
02000000 g       .data	00000000 __data_start
00000000 g     F *ABS*	00000000 vfprintf



Disassembly of section .init:

00000000 <_start>:
   0:	    02000117          	auipc	x2,0x2000
   4:	    04010113          	addi	x2,x2,64 # 2000040 <__stack>
   8:	    02000197          	auipc	x3,0x2000
   c:	    7f818193          	addi	x3,x3,2040 # 2000800 <__global_pointer$>
  10:	    02000517          	auipc	x10,0x2000
  14:	    ff050513          	addi	x10,x10,-16 # 2000000 <__bss_end>
  18:	    39000593          	addi	x11,x0,912
  1c:	    00000613          	addi	x12,x0,0
  20:	    32c000ef          	jal	x1,34c <memcpy>
  24:	    02000517          	auipc	x10,0x2000
  28:	    fdc50513          	addi	x10,x10,-36 # 2000000 <__bss_end>
  2c:	    00000593          	addi	x11,x0,0
  30:	    00000613          	addi	x12,x0,0
  34:	    33c000ef          	jal	x1,370 <memset>
  38:	    02000517          	auipc	x10,0x2000
  3c:	    fc850513          	addi	x10,x10,-56 # 2000000 <__bss_end>
  40:	    304000ef          	jal	x1,344 <_set_tls>
  44:	    00000513          	addi	x10,x0,0
  48:	    00000593          	addi	x11,x0,0
  4c:	    008000ef          	jal	x1,54 <main>
  50:	/-- 0000006f          	jal	x0,50 <__ram_size+0x10>

Disassembly of section .text:

00000054 <main>:
     ###     }
     ###     return index;
     ### }
     ### 
     ### // main function
     ### int main(int argc, char const *argv[]) {
  54:	                            fd010113          	addi	x2,x2,-48
  58:	                            02812423          	sw	x8,40(x2)
  5c:	                            02112623          	sw	x1,44(x2)
  60:	                            02912223          	sw	x9,36(x2)
     ###     graph[1] = 0b00000000000000000000100000000101;
  64:	                            00001737          	lui	x14,0x1
     ###     graph[0] = 0b00000000000000000000010001000010;
  68:	                            020004b7          	lui	x9,0x2000
  6c:	                            44200793          	addi	x15,x0,1090
  70:	                            01048413          	addi	x8,x9,16 # 2000010 <__bss_end+0x10>
  74:	                            00f4a823          	sw	x15,16(x9)
     ###     graph[1] = 0b00000000000000000000100000000101;
  78:	                            80570793          	addi	x15,x14,-2043 # 805 <__flash_size+0x405>
  7c:	                            00f42223          	sw	x15,4(x8)
     ###     graph[2] = 0b00000000000000000000000000111010;
  80:	                            03a00793          	addi	x15,x0,58
  84:	                            00f42423          	sw	x15,8(x8)
     ###     graph[3] = 0b00000000000000000000000000000100;
  88:	                            00400793          	addi	x15,x0,4
  8c:	                            00f42623          	sw	x15,12(x8)
     ###     graph[4] = 0b00000000000000000000000000000100;
  90:	                            00f42823          	sw	x15,16(x8)
     ###     graph[5] = 0b00000000000000000000000000000100;
  94:	                            00f42a23          	sw	x15,20(x8)
     ###     graph[6] = 0b00000000000000000000001110000001;
  98:	                            38100793          	addi	x15,x0,897
  9c:	                            00f42c23          	sw	x15,24(x8)
     ###     graph[7] = 0b00000000000000000000000001000000;
  a0:	                            04000793          	addi	x15,x0,64
  a4:	                            00f42e23          	sw	x15,28(x8)
     ###     graph[8] = 0b00000000000000000000000001000000;
  a8:	                            02f42023          	sw	x15,32(x8)
     ###     graph[9] = 0b00000000000000000000000001000000;
  ac:	                            02f42223          	sw	x15,36(x8)
     ###     graph[10] = 0b00000101000000000000100000000001;
  b0:	                            050017b7          	lui	x15,0x5001
  b4:	                            80178793          	addi	x15,x15,-2047 # 5000801 <__global_pointer$+0x3000001>
  b8:	                            02f42423          	sw	x15,40(x8)
     ###     graph[11] = 0b00000000000010000001010000000010;
  bc:	                            000817b7          	lui	x15,0x81
  c0:	                            40278793          	addi	x15,x15,1026 # 81402 <__flash_size+0x81002>
  c4:	                            02f42623          	sw	x15,44(x8)
     ###     graph[12] = 0b00000000000000000110100000000000;
  c8:	                            000077b7          	lui	x15,0x7
  cc:	                            80078793          	addi	x15,x15,-2048 # 6800 <__flash_size+0x6400>
  d0:	                            02f42823          	sw	x15,48(x8)
     ###     graph[14] = 0b00000000000000011001000000000000;
  d4:	                            000197b7          	lui	x15,0x19
  d8:	                            02f42c23          	sw	x15,56(x8)
     ###     graph[15] = 0b00000000000000000100000000000000;
  dc:	                            000047b7          	lui	x15,0x4
  e0:	                            02f42e23          	sw	x15,60(x8)
     ###     graph[16] = 0b00000000000001100100000000000000;
  e4:	                            000647b7          	lui	x15,0x64
  e8:	                            04f42023          	sw	x15,64(x8)
     ###     graph[17] = 0b00000000000000010000000000000000;
  ec:	                            000107b7          	lui	x15,0x10
  f0:	                            04f42223          	sw	x15,68(x8)
     ###     graph[18] = 0b00000000001010010000000000000000;
  f4:	                            002907b7          	lui	x15,0x290
  f8:	                            04f42423          	sw	x15,72(x8)
     ###     graph[19] = 0b00000000000101000000100000000000;
  fc:	                            001417b7          	lui	x15,0x141
 100:	                            80078793          	addi	x15,x15,-2048 # 140800 <__flash_size+0x140400>
 104:	                            04f42623          	sw	x15,76(x8)
     ###     graph[20] = 0b00000000000010000000000000000000;
 108:	                            000807b7          	lui	x15,0x80
 10c:	                            04f42823          	sw	x15,80(x8)
     ###     graph[21] = 0b00000000110001000000000000000000;
 110:	                            00c407b7          	lui	x15,0xc40
 114:	                            04f42a23          	sw	x15,84(x8)
     ###     graph[22] = 0b00000000001000000000000000000000;
 118:	                            002007b7          	lui	x15,0x200
 11c:	                            04f42c23          	sw	x15,88(x8)
     ###     graph[23] = 0b01000001001000000000000000000000;
 120:	                            412007b7          	lui	x15,0x41200
 124:	                            04f42e23          	sw	x15,92(x8)
     ###     graph[24] = 0b00000010100000000000010000000000;
 128:	                            028007b7          	lui	x15,0x2800
 12c:	                            40078793          	addi	x15,x15,1024 # 2800400 <__global_pointer$+0x7ffc00>
 130:	                            06f42023          	sw	x15,96(x8)
     ###     graph[25] = 0b00000001000000000000000000000000;
 134:	                            010007b7          	lui	x15,0x1000
 138:	                            06f42223          	sw	x15,100(x8)
     ###     graph[26] = 0b00011000000000000000010000000000;
 13c:	                            180007b7          	lui	x15,0x18000
 140:	                            40078793          	addi	x15,x15,1024 # 18000400 <__global_pointer$+0x15fffc00>
 144:	                            06f42423          	sw	x15,104(x8)
     ###     graph[27] = 0b00000100000000000000000000000000;
 148:	                            040007b7          	lui	x15,0x4000
 14c:	                            06f42623          	sw	x15,108(x8)
     ###     graph[28] = 0b01100100000000000000000000000000;
 150:	                            640007b7          	lui	x15,0x64000
     ###     graph[13] = 0b00000000000000000001000000000000;
 154:	                            02e42a23          	sw	x14,52(x8)
     ###     graph[28] = 0b01100100000000000000000000000000;
 158:	                            06f42823          	sw	x15,112(x8)
     ###     graph[29] = 0b00010000000000000000000000000000;
 15c:	                            100007b7          	lui	x15,0x10000
 160:	                            06f42a23          	sw	x15,116(x8)
     ###     graph[30] = 0b10010000100000000000000000000000;
 164:	                            908007b7          	lui	x15,0x90800
 168:	                            06f42c23          	sw	x15,120(x8)
     ###     graph[31] = 0b01000000000000000000000000000000;
 16c:	                            400007b7          	lui	x15,0x40000
 170:	                            06f42e23          	sw	x15,124(x8)
     ###     #ifdef __linux__
     ###         uint8_t cost[V] = {[0 ... (V-1)] = UINT8_MAX};
     ###     #else
     ###         uint8_t *cost = (uint8_t *) 0x02000100; // Adjust memory address if needed for the device
     ###         for (uint8_t i = 0; i < V; i++) {
     ###             cost[i] = UINT8_MAX;
 174:	                            02000613          	addi	x12,x0,32
 178:	                            0ff00593          	addi	x11,x0,255
 17c:	                            10048513          	addi	x10,x9,256
 180:	                            1f0000ef          	jal	x1,370 <memset>
     ###     #ifdef __linux__
     ###         int8_t parent[V] = {[0 ... (V-1)] = -1};
     ###     #else
     ###         int8_t *parent = (int8_t *) 0x02000200; // Adjust memory address if needed for the device
     ###         for (uint8_t i = 0; i < V; i++) {
     ###             parent[i] = -1;
 184:	                            02000613          	addi	x12,x0,32
 188:	                            20048513          	addi	x10,x9,512
 18c:	                            0ff00593          	addi	x11,x0,255
 190:	                            1e0000ef          	jal	x1,370 <memset>
     ###         }
     ###     #endif
     ###     
     ###     
     ###     cost[START_POINT] = 0;
 194:	                            0004c783          	lbu	x15,0(x9)
     ###         if((!(processed & (1<<i))) && (cost[i]<min)) {
 198:	                            020006b7          	lui	x13,0x2000
     ###     cost[START_POINT] = 0;
 19c:	                            02000613          	addi	x12,x0,32
 1a0:	                            0ff7f793          	andi	x15,x15,255
 1a4:	                            00f484b3          	add	x9,x9,x15
 1a8:	                            10048023          	sb	x0,256(x9)
     ### 
     ###     uint32_t processed = 0;
 1ac:	                            00000513          	addi	x10,x0,0
     ###     int8_t index = -1;
 1b0:	                            fff00f13          	addi	x30,x0,-1
     ###         if((!(processed & (1<<i))) && (cost[i]<min)) {
 1b4:	                            00100813          	addi	x16,x0,1
     ###     for(uint8_t i = 0; i<V; i++){
 1b8:	                            02000e13          	addi	x28,x0,32
 1bc:	                            10068f93          	addi	x31,x13,256 # 2000100 <__stack+0xc0>
     ### int main(int argc, char const *argv[]) {
 1c0:	                  /-------> 00000713          	addi	x14,x0,0
     ###     int8_t index = -1;
 1c4:	                  |         fff00793          	addi	x15,x0,-1
     ###     uint8_t min = UINT8_MAX;
 1c8:	                  |         0ff00893          	addi	x17,x0,255
     ###         if((!(processed & (1<<i))) && (cost[i]<min)) {
 1cc:	                  |  /----> 00e815b3          	sll	x11,x16,x14
 1d0:	                  |  |      00a5f5b3          	and	x11,x11,x10
 1d4:	                  |  |  /-- 00059e63          	bne	x11,x0,1f0 <path_planner.c.f6905a91+0x2>
 1d8:	                  |  |  |   00e685b3          	add	x11,x13,x14
 1dc:	                  |  |  |   1005c583          	lbu	x11,256(x11)
 1e0:	                  |  |  +-- 0115f863          	bgeu	x11,x17,1f0 <path_planner.c.f6905a91+0x2>
     ###                 index = i;
 1e4:	                  |  |  |   01871793          	slli	x15,x14,0x18
 1e8:	                  |  |  |   4187d793          	srai	x15,x15,0x18
 1ec:	                  |  |  |   00058893          	addi	x17,x11,0
     ###     for(uint8_t i = 0; i<V; i++){
 1f0:	                  |  |  \-> 00170713          	addi	x14,x14,1
 1f4:	                  |  \----- fdc71ce3          	bne	x14,x28,1cc <main+0x178>
     ###     // starting the algo
     ###     for(uint8_t j = 0; j<V; j++){
     ###         uint8_t index = 0;
     ###         int8_t parent_index = 0;
     ###         parent_index = min_cost(cost, processed);
     ###         if(parent_index>=0){
 1f8:	                  |  /----- 05e78463          	beq	x15,x30,240 <path_planner.c.f6905a91+0x52>
     ###             for(index = 0; index<V; index++){
     ###                 if((graph[parent_index] & (1<<index)) && (cost[index] > cost[parent_index] + 1)){
 1fc:	                  |  |      00279313          	slli	x6,x15,0x2
 200:	                  |  |      00640333          	add	x6,x8,x6
 204:	                  |  |      00000713          	addi	x14,x0,0
 208:	                  |  |      00f682b3          	add	x5,x13,x15
 20c:	                  |  |  /-> 00032e83          	lw	x29,0(x6)
 210:	                  |  |  |   00e815b3          	sll	x11,x16,x14
 214:	                  |  |  |   0ff77893          	andi	x17,x14,255
 218:	                  |  |  |   01d5f5b3          	and	x11,x11,x29
 21c:	      /-----------|--|--|-- 0a059663          	bne	x11,x0,2c8 <path_planner.c.f6905a91+0xda>
     ###             for(index = 0; index<V; index++){
 220:	/-----|-----------|--|--|-> 00170713          	addi	x14,x14,1
 224:	|     |           |  |  \-- ffc714e3          	bne	x14,x28,20c <path_planner.c.f6905a91+0x1e>
 228:	|     |           |  |      02000893          	addi	x17,x0,32
     ###                         parent[index] = parent_index;
     ###                         if(index == END_POINT) break; // considering all of equal weight edges
     ###                 }
     ###             }
     ### 
     ###             processed = processed | (1<<parent_index);
 22c:	|  /--|-----------|--|----> 00f817b3          	sll	x15,x16,x15
 230:	|  |  |           |  |      00f56533          	or	x10,x10,x15
     ###             if(index == END_POINT) break;
 234:	|  |  |           |  |      0046c783          	lbu	x15,4(x13)
 238:	|  |  |           |  |      0ff7f793          	andi	x15,x15,255
 23c:	|  |  |           |  |  /-- 00f88863          	beq	x17,x15,24c <path_planner.c.f6905a91+0x5e>
     ###     for(uint8_t j = 0; j<V; j++){
 240:	|  |  |           |  \--|-> fff60613          	addi	x12,x12,-1
 244:	|  |  |           |     |   0ff67613          	andi	x12,x12,255
 248:	|  |  |           \-----|-- f6061ce3          	bne	x12,x0,1c0 <main+0x16c>
     ###         }
     ###         
     ###     }
     ### 
     ###     // decoding the output
     ###     for (int8_t temp = END_POINT; temp != -1; temp = parent[temp]) {
 24c:	|  |  |                 \-> 020006b7          	lui	x13,0x2000
 250:	|  |  |                     0046c783          	lbu	x15,4(x13) # 2000004 <__bss_end+0x4>
     ###     uint8_t idx = 0;
 254:	|  |  |                     00000713          	addi	x14,x0,0
     ###     for (int8_t temp = END_POINT; temp != -1; temp = parent[temp]) {
 258:	|  |  |                     fff00613          	addi	x12,x0,-1
 25c:	|  |  |                     01879793          	slli	x15,x15,0x18
 260:	|  |  |                     4187d793          	srai	x15,x15,0x18
 264:	|  |  |                     20068693          	addi	x13,x13,512
 268:	|  |  |     /--------/----X 08c79863          	bne	x15,x12,2f8 <path_planner.c.f6905a91+0x10a>
     ###         idx++;
     ###     }
     ### 
     ### 
     ###     path_planned[idx-1] = END_POINT;
 26c:	|  |  |     |        |      020007b7          	lui	x15,0x2000
 270:	|  |  |     |        |      0047c683          	lbu	x13,4(x15) # 2000004 <__bss_end+0x4>
 274:	|  |  |     |        |      02010793          	addi	x15,x2,32
 278:	|  |  |     |        |      00e787b3          	add	x15,x15,x14
 27c:	|  |  |     |        |      fcd78fa3          	sb	x13,-33(x15)
     ###     for(int8_t i = idx-2; i>=0; i--){
 280:	|  |  |     |        |      ffe70793          	addi	x15,x14,-2
 284:	|  |  |     |        |      01879793          	slli	x15,x15,0x18
 288:	|  |  |     |        |      4187d793          	srai	x15,x15,0x18
 28c:	|  |  |     |        |      00f106b3          	add	x13,x2,x15
     ###         path_planned[i] = parent[path_planned[i+1]];
 290:	|  |  |     |        |      020005b7          	lui	x11,0x2000
     ###     for(int8_t i = idx-2; i>=0; i--){
 294:	|  |  |     |  /-----|--/-X 0607dc63          	bge	x15,x0,30c <path_planner.c.f6905a91+0x11e>
     ### 
     ### 
     ###     // ##############################################
     ### 
     ###     // the node values are written into data memory sequentially.
     ###     for (int i = 0; i < idx; ++i) {
 298:	|  |  |     |  |     |  |   00000793          	addi	x15,x0,0
     ###         NODE_POINT = path_planned[i];
 29c:	|  |  |     |  |     |  |   020006b7          	lui	x13,0x2000
     ###     for (int i = 0; i < idx; ++i) {
 2a0:	|  |  |  /--|--|--/--|--|-X 08e7c863          	blt	x15,x14,330 <path_planner.c.f6905a91+0x142>
     ###     }
     ###     // Path Planning Computation Done Flag
     ###     CPU_DONE = 1;
 2a4:	|  |  |  |  |  |  |  |  |   020007b7          	lui	x15,0x2000
 2a8:	|  |  |  |  |  |  |  |  |   00100713          	addi	x14,x0,1
 2ac:	|  |  |  |  |  |  |  |  |   00e78623          	sb	x14,12(x15) # 200000c <__bss_end+0xc>
     ###         _put_str("################################\n");
     ### 
     ###     #endif
     ### 
     ###     return 0;
     ### }
 2b0:	|  |  |  |  |  |  |  |  |   02c12083          	lw	x1,44(x2)
 2b4:	|  |  |  |  |  |  |  |  |   02812403          	lw	x8,40(x2)
 2b8:	|  |  |  |  |  |  |  |  |   02412483          	lw	x9,36(x2)
 2bc:	|  |  |  |  |  |  |  |  |   00000513          	addi	x10,x0,0
 2c0:	|  |  |  |  |  |  |  |  |   03010113          	addi	x2,x2,48
 2c4:	|  |  |  |  |  |  |  |  |   00008067          	jalr	x0,0(x1)
     ###                 if((graph[parent_index] & (1<<index)) && (cost[index] > cost[parent_index] + 1)){
 2c8:	|  |  \--|--|--|--|--|--|-> 1002c583          	lbu	x11,256(x5)
 2cc:	|  |     |  |  |  |  |  |   01f70eb3          	add	x29,x14,x31
 2d0:	|  |     |  |  |  |  |  |   000ec383          	lbu	x7,0(x29)
 2d4:	|  |     |  |  |  |  |  |   00158593          	addi	x11,x11,1 # 2000001 <__bss_end+0x1>
 2d8:	+--|-----|--|--|--|--|--|-- f475d4e3          	bge	x11,x7,220 <path_planner.c.f6905a91+0x32>
     ###                         cost[index] = cost[parent_index] + 1;
 2dc:	|  |     |  |  |  |  |  |   00be8023          	sb	x11,0(x29)
     ###                         parent[index] = parent_index;
 2e0:	|  |     |  |  |  |  |  |   00e685b3          	add	x11,x13,x14
 2e4:	|  |     |  |  |  |  |  |   20f58023          	sb	x15,512(x11)
     ###                         if(index == END_POINT) break; // considering all of equal weight edges
 2e8:	|  |     |  |  |  |  |  |   0046c583          	lbu	x11,4(x13) # 2000004 <__bss_end+0x4>
 2ec:	|  |     |  |  |  |  |  |   0ff5f593          	andi	x11,x11,255
 2f0:	\--|-----|--|--|--|--|--|-- f31598e3          	bne	x11,x17,220 <path_planner.c.f6905a91+0x32>
 2f4:	   \-----|--|--|--|--|--|-- f39ff06f          	jal	x0,22c <path_planner.c.f6905a91+0x3e>
     ###         idx++;
 2f8:	         |  |  |  |  \--|-> 00170713          	addi	x14,x14,1
     ###     for (int8_t temp = END_POINT; temp != -1; temp = parent[temp]) {
 2fc:	         |  |  |  |     |   00d787b3          	add	x15,x15,x13
 300:	         |  |  |  |     |   00078783          	lb	x15,0(x15)
     ###         idx++;
 304:	         |  |  |  |     |   0ff77713          	andi	x14,x14,255
     ###     for (int8_t temp = END_POINT; temp != -1; temp = parent[temp]) {
 308:	         |  \--|--|-----|-- f61ff06f          	jal	x0,268 <path_planner.c.f6905a91+0x7a>
     ###         path_planned[i] = parent[path_planned[i+1]];
 30c:	         |     |  |     \-> 0016c603          	lbu	x12,1(x13)
 310:	         |     |  |         fff78793          	addi	x15,x15,-1
 314:	         |     |  |         01879793          	slli	x15,x15,0x18
 318:	         |     |  |         00c58633          	add	x12,x11,x12
 31c:	         |     |  |         20064603          	lbu	x12,512(x12)
 320:	         |     |  |         4187d793          	srai	x15,x15,0x18
 324:	         |     |  |         fff68693          	addi	x13,x13,-1
 328:	         |     |  |         00c680a3          	sb	x12,1(x13)
     ###     for(int8_t i = idx-2; i>=0; i--){
 32c:	         |     \--|-------- f69ff06f          	jal	x0,294 <path_planner.c.f6905a91+0xa6>
     ###         NODE_POINT = path_planned[i];
 330:	         |        \-------> 00f10633          	add	x12,x2,x15
 334:	         |                  00064603          	lbu	x12,0(x12)
     ###     for (int i = 0; i < idx; ++i) {
 338:	         |                  00178793          	addi	x15,x15,1
     ###         NODE_POINT = path_planned[i];
 33c:	         |                  00c68423          	sb	x12,8(x13)
     ###     for (int i = 0; i < idx; ++i) {
 340:	         \----------------- f61ff06f          	jal	x0,2a0 <path_planner.c.f6905a91+0xb2>

00000344 <_set_tls>:
 344:	00050213          	addi	x4,x10,0
 348:	00008067          	jalr	x0,0(x1)

0000034c <memcpy>:
 34c:	       00050313          	addi	x6,x10,0
 350:	/----- 00060e63          	beq	x12,x0,36c <memcpy+0x20>
 354:	|  /-> 00058383          	lb	x7,0(x11)
 358:	|  |   00730023          	sb	x7,0(x6)
 35c:	|  |   fff60613          	addi	x12,x12,-1
 360:	|  |   00130313          	addi	x6,x6,1
 364:	|  |   00158593          	addi	x11,x11,1
 368:	|  \-- fe0616e3          	bne	x12,x0,354 <memcpy+0x8>
 36c:	\----> 00008067          	jalr	x0,0(x1)

00000370 <memset>:
 370:	       00050313          	addi	x6,x10,0
 374:	/----- 00060a63          	beq	x12,x0,388 <memset+0x18>
 378:	|  /-> 00b30023          	sb	x11,0(x6)
 37c:	|  |   fff60613          	addi	x12,x12,-1
 380:	|  |   00130313          	addi	x6,x6,1
 384:	|  \-- fe061ae3          	bne	x12,x0,378 <memset+0x8>
 388:	\----> 00008067          	jalr	x0,0(x1)

0000038c <__text_end>:
 38c:	0000                	c.unimp
	...
